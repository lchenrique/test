import { FastifyPluginAsyncZod } from 'fastify-type-provider-zod'
import { evolutionApi } from '../lib/evolution-api'
import {
  meResponseSchema,
  errorResponseSchema,
} from '../schemas'

export const meRoutes: FastifyPluginAsyncZod = async (app) => {
  app.get('/', {
    schema: {
      tags: ['user'],
      description: 'Obter dados do usu√°rio e sua inst√¢ncia padr√£o',
      response: {
        200: meResponseSchema,
        500: errorResponseSchema,
      },
    },
  }, async (request, reply) => {
    try {
      const defaultInstanceName = 'iddouser-sunobot'
      let userInstance = null
      
      // Tentar buscar a inst√¢ncia espec√≠fica
      try {
        const instancesResponse = await evolutionApi.fetchInstances(defaultInstanceName)
        console.log('üîç Resposta completa da Evolution API:', JSON.stringify(instancesResponse.data, null, 2))
        console.log('üîç Tipo da resposta:', typeof instancesResponse.data)
        console.log('üîç √â array?', Array.isArray(instancesResponse.data))
        
        userInstance = instancesResponse.data
        
        // Se for um array, pegar o primeiro item
        if (Array.isArray(userInstance)) {
          userInstance = userInstance[0]
          console.log('üì¶ Inst√¢ncia extra√≠da do array:', userInstance)
        }
        
        console.log('‚úÖ Inst√¢ncia encontrada:', userInstance)
      } catch (error: any) {
        // Se retornou 404, a inst√¢ncia n√£o existe
        if (error.response?.status === 404) {
          console.log(`‚ö†Ô∏è Inst√¢ncia ${defaultInstanceName} n√£o encontrada. Criando...`)
          
          // Criar a inst√¢ncia padr√£o
          const createResponse = await evolutionApi.createInstance({
            instanceName: defaultInstanceName,
            "integration": "WHATSAPP-BAILEYS",
            "webhook": {
              "url": `http://host.docker.internal:3000/webhook/${defaultInstanceName}`,
              "events": [
                "APPLICATION_STARTUP",
                "SEND_MESSAGE",
                "REMOVE_INSTANCE",
                "QRCODE_UPDATED",
                "MESSAGES_UPSERT",
                "MESSAGES_UPDATE",
                "MESSAGES_SET",
                "LOGOUT_INSTANCE",
                "CONNECTION_UPDATE",
                "PRESENCE_UPDATE"
              ]
            }
          })
          
          // Buscar a inst√¢ncia rec√©m-criada
          const updatedInstancesResponse = await evolutionApi.fetchInstances(defaultInstanceName)
          userInstance = updatedInstancesResponse.data
          
          // Se for um array, pegar o primeiro item
          if (Array.isArray(userInstance)) {
            userInstance = userInstance[0]
          }
          
          console.log('‚úÖ Inst√¢ncia criada e encontrada:', userInstance)
        } else {
          // Se n√£o for 404, rejeitar o erro
          throw error
        }
      }
      
      // Verificar se conseguimos obter a inst√¢ncia
      if (!userInstance) {
        throw new Error('N√£o foi poss√≠vel obter ou criar a inst√¢ncia padr√£o')
      }
      
      // Dados fict√≠cios do usu√°rio
      const userData = {
        user: {
          id: 'user-123',
          name: 'Usu√°rio Padr√£o',
          email: 'usuario@exemplo.com',
        },
        instance: {
          ...userInstance,
          disconnectionReasonCode: userInstance.disconnectionReasonCode ? String(userInstance.disconnectionReasonCode) : null,
        },
      }
      
      console.log('üì§ Dados finais a serem retornados:', JSON.stringify(userData, null, 2))
      console.log('üì§ Tipo do userData:', typeof userData)
      console.log('üì§ Tipo do userData.instance:', typeof userData.instance)
      console.log('üì§ userData.instance tem name?', 'name' in userData.instance)
      console.log('üì§ userData.instance tem id?', 'id' in userData.instance)
      
      return userData
    } catch (error: any) {
      console.error('Erro ao obter dados do usu√°rio:', error.message)
      console.error('Detalhes do erro:', error.response?.data)
      
      const statusCode = error.response?.status || 500
      const message = error.response?.data?.message || error.message || 'Erro interno do servidor'

      return reply.status(statusCode).send({
        statusCode,
        error: error.response?.statusText || 'Internal Server Error',
        message,
      })
    }
  })
}